<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>//    
// this Setup delegate will be executed once, when program become active
Program.Setup(()=&gt;
{
	// list the program as custom weather widget
	Program.AddControlWidget( "weather/wunderground/conditions" );
    // set input fields parameters
    // &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
    Program.AddInputField("Location", "autoip", "City name");
    Program.AddInputField("Language", "EN", "Language");
    Program.AddInputField("ApiKey", "?", "Weather Underground Key");
    Program.AddInputField("UpdateInterval", "30", "Update interval (minutes)");
  
    // 2014-01-22 - Added to allow the user to dynamically select how to display the temperature. by lancebooth 
    Program.AddInputField("InputDisplayCelsius", "TRUE", "Display Temperature in degrees Celsius - TRUE or FALSE");
    
    // initialize widget program parameters
    Program.Parameter("Astronomy.Sunset").Value = "";
    Program.Parameter("Astronomy.Sunrise").Value = "";
    Program.Parameter("Conditions.City").Value = "";
    Program.Parameter("Conditions.TemperatureC").Value = "";
    Program.Parameter("Conditions.TemperatureF").Value = "";
    Program.Parameter("Conditions.DisplayLocation").Value = "";
    Program.Parameter("Conditions.IconUrl").Value = "";
    Program.Parameter("Conditions.Description").Value = "";    
});
//
return true; // execute "Code To Run"
</ScriptCondition>
  <ScriptSource>while (Program.IsEnabled)
{
  string location = Program.InputField("Location").Value;
  string language = Program.InputField("Language").Value;
  string apikey = Program.InputField("ApiKey").Value;
 
  // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature. by lancebooth
  string display_celsius = Program.InputField("InputDisplayCelsius").Value;

  //
  if (!apikey.Contains("?"))
  {
      try
      {
        
        string webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/astronomy/lang:" + language + "/q/" + location + ".json";
        var astronomydata = Net.WebService(webserviceurl).GetData();
        
        int sunrise_hour = int.Parse(astronomydata.moon_phase.sunrise.hour.ToString());
        int sunrise_minute = int.Parse(astronomydata.moon_phase.sunrise.minute.ToString());
        int sunset_hour = int.Parse(astronomydata.moon_phase.sunset.hour.ToString());
        int sunset_minute = int.Parse(astronomydata.moon_phase.sunset.minute.ToString());
        
        Program.Parameter("Astronomy.Sunset").Value = sunset_hour.ToString("D2") + ":" + sunset_minute.ToString("D2");
        Program.Parameter("Astronomy.Sunrise").Value = sunrise_hour.ToString("D2") + ":" + sunrise_minute.ToString("D2");
        
        // Update Scheduler entries
        Scheduler
          .WithName("Sunset")
          .SetSchedule(String.Format("{0} {1} * * *", sunset_minute, sunset_hour));
        Scheduler
          .WithName("Sunrise")
          .SetSchedule(String.Format("{0} {1} * * *", sunrise_minute, sunrise_hour));
        
        webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/conditions/lang:" + language + "/q/" + location + ".json";
        var weatherdata = Net.WebService(webserviceurl).GetData();
        
        string city = weatherdata.location.city;
        string country = weatherdata.location.country;
        string country_iso3166 = weatherdata.location.country_iso3166; // eg. IT,US,NL,UK,AU,CH,DE...
        string temperaturec = weatherdata.current_observation.temp_c;
        string temperaturef = weatherdata.current_observation.temp_f;
        string display_location = weatherdata.current_observation.display_location.full;
        string weather_text = weatherdata.current_observation.weather;
        string icon = weatherdata.current_observation.icon;
        string icon_url = weatherdata.current_observation.icon_url;
        string wind_dir = weatherdata.current_observation.wind_dir;
        string wind_kph = weatherdata.current_observation.wind_kph;
        string pressure_mb = weatherdata.current_observation.pressure_mb;
        string feelslike_c = weatherdata.current_observation.feelslike_c;
        string feelslike_f = weatherdata.current_observation.feelslike_f;
        string UV = weatherdata.current_observation.UV;
        string precip_1hr_metric = weatherdata.current_observation.precip_1hr_metric;

        // 2014-01-22 - Added to allow the widget to display the date/time.
        string last_updated = DateTime.Now.ToString("g"); //, new System.Globalization.CultureInfo("en-US")
        
        Program.Parameter("Conditions.City").Value = city;
        Program.Parameter("Conditions.Country").Value = country;
        Program.Parameter("Conditions.CountryCode").Value = country_iso3166;
        Program.Parameter("Conditions.TemperatureC").Value = temperaturec;
        Program.Parameter("Conditions.TemperatureF").Value = temperaturef;
        Program.Parameter("Conditions.DisplayLocation").Value = display_location;
        Program.Parameter("Conditions.Description").Value = weather_text;
        Program.Parameter("Conditions.IconUrl").Value = icon_url;
        Program.Parameter("Conditions.Status").Value = icon; // eg. cloudy, sunny, etc..
        Program.Parameter("Conditions.WindDirection").Value = wind_dir;
        Program.Parameter("Conditions.WindKph").Value = wind_kph;
        Program.Parameter("Conditions.PressureMb").Value = pressure_mb;
        Program.Parameter("Conditions.FeelsLikeC").Value = feelslike_c;
        Program.Parameter("Conditions.FeelsLikeF").Value = feelslike_f;
        Program.Parameter("Conditions.UV").Value = UV;
        Program.Parameter("Conditions.PrecipitationHourMetric").Value = precip_1hr_metric;
        
        // 2014-01-22 - Added to allow the widget to display the date/time.
        Program.Parameter("Conditions.LastUpdated").Value = last_updated;

	    // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature.
        Program.Parameter("Conditions.DisplayCelsius").Value = display_celsius;
        
        Program.Notify("Weather Underground", "Updated.");

      } 
      catch (Exception e) 
      {
        
        Program.Notify("Weather Underground ERROR!", "Unable to get data from service.");
        //Program.Parameter("Conditions.City").Value = "ERROR: " + e.Message;
        Console.WriteLine( e.Message );
        Pause(10);
        
      }
  }
  //
  Pause(Program.InputField("UpdateInterval").DecimalValue * 60); // pause 1 hour before next check
  Pause(10);
}</ScriptSource>
  <ScriptErrors />
  <IsRunning>true</IsRunning>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>34</Address>
  <Name>Weather Underground</Name>
  <Description>Gather from http://www.wunderground.com/ service all data about sun rise/set. 
It can be used for "Sunrise/Sunset" feature. 
User must create an account at wunderground.com in order to obtain a service key.</Description>
  <Group>Weather and Enviroment</Group>
  <ActivationTime>2014-04-02T15:14:59.1516283Z</ActivationTime>
  <TriggerTime>2017-04-24T10:48:12.95019Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>