<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions>
    <ProgramCondition>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>37</Target>
      <Property>Sensor.DoorWindow</Property>
      <ComparisonOperator>Equals</ComparisonOperator>
      <ComparisonValue>255</ComparisonValue>
    </ProgramCondition>
  </Conditions>
  <Commands>
    <ProgramCommand>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>4</Target>
      <CommandString>Control.Off</CommandString>
      <CommandArguments />
    </ProgramCommand>
  </Commands>
  <ScriptCondition>// returning true will execute the "Code to Run"
return true;
</ScriptCondition>
  <ScriptSource>// This examples will add 16 modules of type "Switch"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var mcpDomain = "Components.MCP23017.A";

var pinConfiguration = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input },
  new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input },
  new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input },
  new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input },
  new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input },
  new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input },
  new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input },
  new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input },
  //
  new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input },
  new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input },
  new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input },
  new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input },
  new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input },
  new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input },
  new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input },
  new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input }
};
bool[] pinStatus = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnection = new Mcp23017I2cConnection(driver.Connect(0x20));
//
// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(mcpDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errormessage = "";
	try
	{
		string pinid = reqs[1];
      	string command = reqs[2];
        //
        var module = Modules.InDomain(mcpDomain).WithAddress(pinid).Get();
      	// modules with id from 1 to 8 are mapped as A0-A7
      	// modules with id from 9 to 16 as B0-B7
      	var pinname = "";
      	var i = int.Parse(pinid); 
      	if (i &lt;= 8) 
        {
          	pinname = "A" + (i - 1).ToString();
        }
      	else
        {
          	pinname = "B" + (i - 9).ToString();
        }      
      	//
		var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);
        switch(command)
        {
          // eg. http://hg_address/api/Expanders.MCP23017/1/Control.On
          case "Control.On":
          	deviceConnection.SetPinStatus(mcppin, true);
          	break;
          // eg. http://hg_address/api/Expanders.MCP23017/3/Control.Off
          case "Control.Off":
          	deviceConnection.SetPinStatus(mcppin, false);
          	break;
          // eg. http://hg_address/api/Expanders.MCP23017/9/Control.Toggle
          case "Control.Toggle":
          	deviceConnection.Toogle(mcppin);
          	break;
        }
        Program.RaiseEvent(module, "Status.Level", 
                           deviceConnection.GetPinStatus(mcppin) ? "1" : "0", 
                           "MCP23017 " + pinname);
        //
        return "{ 'ResponseValue' : 'OK' }";  
    } 
  	catch (Exception ex) 
    { 
	    errormessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});

// Initialize MCP23017 pins
for (int p = 0; p &lt; pinConfiguration.Count; p++)
{
	var pincfg = pinConfiguration[p];
  	// set direction and read pin status
    deviceConnection.SetDirection(pincfg.Pin, pincfg.Direction);
  
    if (pincfg.Direction == Mcp23017PinDirection.Input)
	{
      deviceConnection.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
	}
    pinStatus[p] = deviceConnection.GetPinStatus(pincfg.Pin);
  
  
  	if (pincfg.Direction == Mcp23017PinDirection.Output)
    {
		Program.AddVirtualModule(mcpDomain, pincfg.Address, "Switch", "homegenie/generic/switch");
         // get the module associated to the pin and store current status
       var module = Modules.InDomain(mcpDomain).WithAddress(pincfg.Address).Get();
  	   module.Parameter("Status.Level").Value = (pinStatus[p] ? "1" : "0");
    }
  	else
    {
		Program.AddVirtualModule(mcpDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor"); 
         // get the module associated to the pin and store current status
    	var module = Modules.InDomain(mcpDomain).WithAddress(pincfg.Address).Get();
  		module.Parameter("Status.Level").Value = (pinStatus[p] ? "0" : "1");
    }
   
}

// status polling loop
while (Program.IsEnabled)
{
  	Pause(0.1); // 500 ms poll resolution
  	//
  	for (int p = 0; p &lt; pinConfiguration.Count; p++)
    {
      	var pincfg = pinConfiguration[p];
      	if (pincfg.Direction == Mcp23017PinDirection.Input)
        {
            bool status = deviceConnection.GetPinStatus(pincfg.Pin);
            // check if the pin status changed
            if (pinStatus[p] != status)
            {
                // get the module associated to the pin
                var module = Modules.InDomain(mcpDomain).WithAddress(pincfg.Address).Get();
                // raise the event and update the current pin status
                Program.RaiseEvent(module, "Status.Level", 
                               status ? "0" : "1", 
                               "MCP23017 " + pincfg.Pin.ToString());
                pinStatus[p] = status;
              	Pause(0.1);
            }
        }
    }
}
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <IsRunning>true</IsRunning>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1000</Address>
  <Name>SmartIC - MCP23017.A</Name>
  <Description>Programmed by Christophe De Boeck</Description>
  <Group>Raspberry Sharp</Group>
  <ActivationTime>2014-06-30T18:38:45.448085Z</ActivationTime>
  <TriggerTime>2014-06-30T18:38:47.573885Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>