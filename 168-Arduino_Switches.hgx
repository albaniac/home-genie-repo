<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>168</Address>
  <Name>Arduino Switches</Name>
  <Description>Arduino controlled Switches.</Description>
  <Group>Raspberry Sharp</Group>
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
  <ScriptCondition>Program.Setup(()=&gt;
{
	// register 3 virtual modules using the "switch" widget for the domain "Arduino.Switches" 
	Program.AddVirtualModules("Arduino.Switches", "Switch", "homegenie/generic/switch", 1, 3);                  
});
// returning true will execute the "Code to Run"
return true;

</ScriptCondition>
  <ScriptSource>// 
// TODO: Initialize serial port here...
// 
When.WebServiceCallReceived("Arduino.Switches", ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
	var res = "{ 'ResponseValue' : 'ERROR' }";
	//
	try
	{
		string switchid = reqs[1];
	    string command = reqs[2];
	    // get reference to the virtual module 
	    var module = Modules.InDomain("Arduino.Switches").WithAddress(switchid).Get();
	  	//
	    switch(command)
	    {
	      	// eg. http://hg_address/api/Arduino.Switches/1/Control.On
	      	case "Control.On":
	      		// TODO: Send command by serial port to the arduino to turn on the switchid
				Program.RaiseEvent(module, "Status.Level", "1", "Switch " + switchid);
				res = "{ 'ResponseValue' : 'OK' }";
				break;
          	// eg. http://hg_address/api/Arduino.Switches/2/Control.Off
	      	case "Control.Off":
	      		// TODO: Send command by serial port to the arduino to turn off the switchid
				Program.RaiseEvent(module, "Status.Level", "0", "Switch " + switchid);
				res = "{ 'ResponseValue' : 'OK' }";
				break;
	    }
	} 
	catch (Exception ex) 
	{ 
	    res = ex.Message + " " + ex.StackTrace;
	}
	// unable to process request
	return res;
});
//
Program.GoBackground();</ScriptSource>
  <ScriptErrors />
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <IsRunning>false</IsRunning>
  <IsEvaluatingConditionBlock>false</IsEvaluatingConditionBlock>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
</ProgramBlock>