<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>var moduleDomain = "HomeAutomation.AVR.Yamaha";
Program.Setup(()=&gt;
{              
    Program.AddInputField("PollInterval", "5", "Status poll interval (seconds)");
    Program.AddFeature("HomeAutomation.AVR.Yamaha", "Generic", "IpAddress", "The IP address of the Yamaha AVR", "text");
  	Program.AddVirtualModules(moduleDomain, "Generic", "AVR/Yamaha/Receiver", 1, 3);
});
return true;
</ScriptCondition>
  <ScriptSource>var moduleDomain = "HomeAutomation.AVR.Yamaha";

Action&lt;ModuleHelper&gt; PollAvr = (ModuleHelper module) =&gt; {
  try
  {
    dynamic result = Net.WebService("http://" + module.Parameter("IpAddress").Value + "/YamahaRemoteControl/ctrl")
      .AddHeader("Content-type", "application/xml; charset=utf-8")
      .Post("&lt;YAMAHA_AV cmd=\"GET\"&gt;&lt;Main_Zone&gt;&lt;Basic_Status&gt;GetParam&lt;/Basic_Status&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;")
      .GetData();

    string power = new System.Text.RegularExpressions.Regex(@"&lt;Power&gt;(.*?)&lt;\/Power&gt;", System.Text.RegularExpressions.RegexOptions.Singleline).Matches(result)[0].Groups[1].Value;
    double volume = double.Parse(new System.Text.RegularExpressions.Regex(@"&lt;Val&gt;(.*?)&lt;\/Val&gt;", System.Text.RegularExpressions.RegexOptions.Singleline).Matches(result)[0].Groups[1].Value) / 10;
    string inputTitle = new System.Text.RegularExpressions.Regex(@"&lt;Title&gt;(.*?)&lt;\/Title&gt;", System.Text.RegularExpressions.RegexOptions.Singleline).Matches(result)[0].Groups[1].Value;
    string input = new System.Text.RegularExpressions.Regex(@"&lt;Input_Sel&gt;(.*?)&lt;\/Input_Sel&gt;", System.Text.RegularExpressions.RegexOptions.Singleline).Matches(result)[0].Groups[1].Value;
    string dsp = new System.Text.RegularExpressions.Regex(@"&lt;Sound_Program&gt;(.*?)&lt;\/Sound_Program&gt;", System.Text.RegularExpressions.RegexOptions.Singleline).Matches(result)[0].Groups[1].Value;
    
    if(module.Parameter("Status.Power").Value != power ||
       module.Parameter("Status.Volume").DecimalValue != volume ||
       module.Parameter("Status.Input").Value != input ||
       module.Parameter("Status.InputTitle").Value != inputTitle ||
       module.Parameter("Status.DSP").Value != dsp
      ){
      module.Parameter("Status.LastUpdate").Value = DateTime.Now.ToString();
      Program.RaiseEvent(module, "Status.LastUpdate", DateTime.Now.ToString(), "");
    }

    if(module.Parameter("Status.Power").Value != power){
      module.Parameter("Status.Power").Value = power;
      Program.RaiseEvent(module, "Status.Power", power, "AVR Power");
    }
    if(module.Parameter("Status.Volume").DecimalValue != volume){
      module.Parameter("Status.Volume").Value = volume.ToString("N1");
      Program.RaiseEvent(module, "Status.Volume", volume.ToString("N1"), "AVR Volume");
    }
    if(module.Parameter("Status.Input").Value != input){
      module.Parameter("Status.Input").Value = input;
      Program.RaiseEvent(module, "Status.Input", input, "AVR Input");
    }
    if(module.Parameter("Status.InputTitle").Value != inputTitle){
      module.Parameter("Status.InputTitle").Value = inputTitle;
      Program.RaiseEvent(module, "Status.InputTitle", inputTitle, "AVR Input Title");
    }
    if(module.Parameter("Status.DSP").Value != dsp){
      module.Parameter("Status.DSP").Value = dsp;
      Program.RaiseEvent(module, "Status.DSP", dsp, "AVR DSP");
    }
  }
  catch(Exception e)
  {
    Program.Notify("Yamaha AVR Error", "Unable to get data from receiver at " + module.Parameter("IpAddress").Value + ". " + e.Message);
    Console.WriteLine( e.Message );
  }
};

When.WebServiceCallReceived(moduleDomain,(args) =&gt; 
{
  string[] request = ((string)args).Split('/');
  var response = "{ 'ResponseValue' : 'ERROR' }";
  try
  {
    string moduleId = request[1];
    string command = request[2];
    string parameter = request[3].Replace("%20", " ");
    
    var module = Modules.InDomain(moduleDomain).WithAddress(moduleId).Get();
    double volume = module.Parameter("Status.Volume").DecimalValue;
    var xml = "";

    switch(command)
    {
      case "Control.On":
        xml = "&lt;YAMAHA_AV cmd=\"PUT\"&gt;&lt;Main_Zone&gt;&lt;Power_Control&gt;&lt;Power&gt;On&lt;/Power&gt;&lt;/Power_Control&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;";
        break;
      case "Control.Off":
        xml = "&lt;YAMAHA_AV cmd=\"PUT\"&gt;&lt;Main_Zone&gt;&lt;Power_Control&gt;&lt;Power&gt;Standby&lt;/Power&gt;&lt;/Power_Control&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;";
        break;
      case "Control.Volume":
        double setVolume = 0;
        if(double.TryParse(request[3], out setVolume))
          volume = setVolume;
        else
          volume = request[3] == "Up" ? volume * 10 + 50 : volume * 10 - 50;
        xml = "&lt;YAMAHA_AV cmd=\"PUT\"&gt;&lt;Main_Zone&gt;&lt;Volume&gt;&lt;Lvl&gt;&lt;Val&gt;" + volume.ToString() + "&lt;/Val&gt;&lt;Exp&gt;1&lt;/Exp&gt;&lt;Unit&gt;dB&lt;/Unit&gt;&lt;/Lvl&gt;&lt;/Volume&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;";
        break;
      case "Control.Input":
        xml = "&lt;YAMAHA_AV cmd=\"PUT\"&gt;&lt;Main_Zone&gt;&lt;Input&gt;&lt;Input_Sel&gt;" + parameter + "&lt;/Input_Sel&gt;&lt;/Input&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;";
        break;
      case "Control.DSP":
        xml = "&lt;YAMAHA_AV cmd=\"PUT\"&gt;&lt;Main_Zone&gt;&lt;Surround&gt;&lt;Program_Sel&gt;&lt;Current&gt;&lt;Sound_Program&gt;" + parameter + "&lt;/Sound_Program&gt;&lt;/Current&gt;&lt;/Program_Sel&gt;&lt;/Surround&gt;&lt;/Main_Zone&gt;&lt;/YAMAHA_AV&gt;";
        break;
    }

    var webRequest = Net.WebService("http://" + module.Parameter("IpAddress").Value + "/YamahaRemoteControl/ctrl")
      .AddHeader("Content-type", "text/xml; charset=utf-8")
      .Post(xml);

    var webResult = webRequest.GetData();
    PollAvr(module);
    response = "{ 'ResponseValue' : 'OK' }";
  } 
  catch (Exception ex) {
    response = ex.Message + " " + ex.StackTrace;
  }
  
  return response;
});

while (Program.IsEnabled)
{
  Modules.InDomain("HomeAutomation.AVR.Yamaha").Each((module) =&gt; {
    if(module.Parameter("IpAddress").Value != "")
      PollAvr(module);
    return false;
  });
  var delay = Program.InputField("PollInterval").DecimalValue;
  if (delay &lt; 1) delay = 1;
  Pause(delay);
}
</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1013</Address>
  <Name>Yamaha AVR</Name>
  <Description>Interface with network-enabled Yamaha AVRs. Note that network standby must be enabled on the AVR.</Description>
  <Group>Santee Programs</Group>
  <Features>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains>HomeAutomation.AVR.Yamaha</ForDomains>
      <ForTypes>Generic</ForTypes>
      <Property>IpAddress</Property>
      <Description>The IP address of the Yamaha AVR</Description>
    </ProgramFeature>
  </Features>
  <ActivationTime>2015-11-14T00:19:33.6314449Z</ActivationTime>
  <TriggerTime>2015-11-14T00:19:33.6853291Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>