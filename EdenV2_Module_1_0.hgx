<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.
return true;
</ScriptCondition>
  <ScriptSource>// Eden Board v2 app
const string EDEN_DOMAIN = "HomeAutomation.Eden";
// add a virtual module of type sensor
Program.AddVirtualModule(EDEN_DOMAIN, "1","Sensor", "homegenie/generic/sensor");
var sensorModule = Modules.InDomain(EDEN_DOMAIN).WithAddress("1").Get();

// SPI communication with onboard Arduino
var driver = GpioConnectionSettings.DefaultDriver;

var adcClock = ConnectorPin.P1Pin23.ToProcessor();
var adcMiso = ConnectorPin.P1Pin21.ToProcessor();
var adcMosi = ConnectorPin.P1Pin19.ToProcessor();
var adcCs = ConnectorPin.P1Pin24.ToProcessor();
var interrupt = ConnectorPin.P1Pin18.ToProcessor();

driver.Allocate(adcClock, PinDirection.Output);
driver.Allocate(adcCs, PinDirection.Output);
driver.Allocate(adcMosi, PinDirection.Output);
driver.Allocate(adcMiso, PinDirection.Input);

var sendCommand = new Func&lt;string, bool&gt;((txt)=&gt;{
  lock (this)
  {
    txt += "\n"; // append end of command character
    using (var adcConnection = new Raspberry.IO.SerialPeripheralInterface.SpiConnection(
      driver.Out(adcClock),
      driver.Out(adcCs),
      driver.In(adcMiso),
      driver.Out(adcMosi), Raspberry.IO.SerialPeripheralInterface.Endianness.LittleEndian))
    {
      using(adcConnection.SelectSlave())
      {
        driver.Allocate(interrupt, PinDirection.Output);
        for(int x = 0; x &lt; txt.Length; x++)
        {
          driver.Write(interrupt, true);
          adcConnection.Write((byte)txt[x], 8);
          driver.Write(interrupt, false);
        }
      }
    }
  }
  return true;
});
var readResponse = new Func&lt;string&gt;(()=&gt;{
  string response = "";
  lock(this)
  {
    using (var adcConnection = new Raspberry.IO.SerialPeripheralInterface.SpiConnection(
      driver.Out(adcClock),
      driver.Out(adcCs),
      driver.In(adcMiso),
      driver.Out(adcMosi), Raspberry.IO.SerialPeripheralInterface.Endianness.LittleEndian))
    {
      using(adcConnection.SelectSlave())
      {
        // Wait the slave to set interrupt to high before start reading
        driver.Allocate(interrupt, PinDirection.Input);
        Pause(0.1);
        while(!driver.Read(interrupt)); //TODO: add timeout handling here to avoid loops
        // Read data from SPI
        int len = 0; char c = '\0';
        while (c != '\n' &amp;&amp; len &lt; 128)
        {
          uint i = (uint)adcConnection.Read(8);
          c = (char)(i/2); response += c;
          len++;
        }
        driver.Allocate(interrupt, PinDirection.Output);      
      }
      //Program.Notify("HG2Arduino", "&lt;pre&gt;" + response + "&lt;/pre&gt;");
    }
  }
  sendCommand(""); // clear buffer 
  return response.Replace("\n", "");
});

// handles web service calls
When.WebServiceCallReceived(EDEN_DOMAIN, (args)=&gt;{
  var response = "{ 'ResponseValue' : 'OK' }";
  var cmdParts = args.ToString().Split('/');
  if (cmdParts.Length &lt; 3) return false;
  //
  var nodeId = cmdParts[1];
  var command = cmdParts[2];
  var argument = ""; if (cmdParts.Length &gt; 3) argument = cmdParts[3];
  //
  if (nodeId == "MCU") // control the OLED display
  {
    switch(command)
    {
      case "Oled.ClearScreen":
      	sendCommand("clearscreen");
      	break;
      case "Oled.GoTo":
      	sendCommand("goto " + argument);
      	break;
      case "Oled.ShowLogo":
      	sendCommand("showlogo");
      	break;
      case "Oled.ShowText":
        var align="LEFT";
        if (cmdParts.Length &gt; 4)
        {
          // align argument is the 5th parameter
          align = cmdParts[4].ToUpper();
        }
        var text = argument.Replace("%20", " ");
        switch (align)
        {
          case "LEFT":
          text = text.PadRight(16, ' ');
          break;
          case "RIGHT":
          text = text.PadLeft(16, ' ');
          break;
          case "CENTER":
          int spaces = 16 - text.Length; if (spaces &lt; 0) spaces = 0;
          int padLeft = (spaces / 2) + text.Length;
          text = text.PadLeft(padLeft).PadRight(16);          
          break;
        }
        sendCommand("showtext " + text);
      	break;
      case "Sensors.Update":
      	sendCommand("update");
      	break;
      case "Sensors.Luminance":
        sendCommand("luminance");
        var luminance = readResponse();
        Program.RaiseEvent(sensorModule, "Sensor.Luminance", luminance, "Eden Sensor Module");
  		response = "{ 'ResponseValue' : '" + luminance + "' }";
      	break;
      case "Sensors.Temperature":
        sendCommand("temperature");
        var temperature = readResponse();
        Program.RaiseEvent(sensorModule, "Sensor.Temperature", temperature, "Eden Sensor Module");
  		response = "{ 'ResponseValue' : '" + temperature + "' }";
      	break;
    }
  }
  return response;
});

// Initialize by clearing the screen
// and showing HomeGenie logo
sendCommand("clearscreen");
Pause(2);
sendCommand("goto 2,0");
sendCommand("showlogo");
Pause(2);

// Main app loop for updating time and sensor values
while (Program.IsEnabled)
{
  sendCommand("goto 7,0");
  sendCommand("showtext " + DateTime.Now.ToString().Substring(0, 16));

  sendCommand("luminance");
  var luminance = readResponse();
  Program.RaiseEvent(sensorModule, "Sensor.Luminance", luminance, "Eden Sensor Module");

  sendCommand("temperature");
  var temperature = readResponse();
  Program.RaiseEvent(sensorModule, "Sensor.Temperature", temperature, "Eden Sensor Module");

  Pause(60);
}</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <IsRunning>false</IsRunning>
  <Features />
  <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1001</Address>
  <Name>Eden Module</Name>
  <Description>Adds a sensor module for showing temperature and luminace value read from onboard Arduino hardware.
It also implements web service API for controlling the OLED display.</Description>
  <Group>Eden Board</Group>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>