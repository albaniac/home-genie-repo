<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// Call 'hg.SetConditionTrue()' when you want
// the 'Code To Run' to be executed.
hg.SetConditionTrue();
hg.Program.Setup(function(){
  hg.Program.AddControlWidget("jkUtils/SolarAltitude/SolarAltitude");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Latitude", "", "Location: Latitude");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Longitude", "", "Location: Longitude");    
  hg.Program.AddInputField("jkUtils.SolarAltitude.Label", "", "Custom Label");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Zoom", "100%", "Custom Zoom");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Color", "46", "Custom Color (HUE Value)");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Timeformat", "FALSE", "Custom Timeformat (TRUE = use AM/PM Format, FALSE = use 24h Format)");
});
</ScriptCondition>
  <ScriptSource>
// jkUtils - Solar Altitude Ver 2.0 2014-05-07
// ------------------------------------
// A HomeGenie script to locally calculate sunrise/sunset with civil, nautical and astronomical timings.
// This script also sets and automatically updates timers for the scheduler service.
// Requires local longitude and latitude values to be set within programm options.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use of the original SunCalc which is a JavaScript library for calculating sun/mooon position and light phases.
// For more info see https://github.com/mourner/SunCalc (c) 2011-2014, Vladimir Agafonkin. BSD-licensed.

// calculations for illumination parameters of the moon, based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.


// shortcuts for easier to read formulas

var PI = Math.PI,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) {
    return date.valueOf() / dayMs - 0.5 + J1970;
}
function fromJulian(j) {
    return new Date((j + 0.5 - J1970) * dayMs);
}
function toDays(date) {
    return toJulian(date) - J2000;
}


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function getRightAscension(l, b) {
    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));
}
function getDeclination(l, b) {
    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));
}
function getAzimuth(H, phi, dec) {
    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));
}
function getAltitude(H, phi, dec) {
    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));
}
function getSiderealTime(d, lw) {
    return rad * (280.16 + 360.9856235 * d) - lw;
}


// general sun calculations

function getSolarMeanAnomaly(d) {
    return rad * (357.5291 + 0.98560028 * d);
}
function getEquationOfCenter(M) {
    return rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M));
}
function getEclipticLongitude(M, C) {
    var P = rad * 102.9372; // perihelion of the Earth
    return M + C + P + PI;
}
function getSunCoords(d) {

    var M = getSolarMeanAnomaly(d),
        C = getEquationOfCenter(M),
        L = getEclipticLongitude(M, C);

    return {
        dec: getDeclination(L, 0),
        ra: getRightAscension(L, 0)
    };
}


var SolarAltitude = {};


// calculates sun position for a given date and latitude/longitude

SolarAltitude.getPosition = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        c = getSunCoords(d),
        H = getSiderealTime(d, lw) - c.ra;

    return {
        azimuth: getAzimuth(H, phi, c.dec),
        altitude: getAltitude(H, phi, c.dec)
    };
};


// sun times configuration (angle, morning name, evening name)

var times = [
    [ -0.83,'sunrise', 'sunset' ],
    [ -0.3, 'sunriseEnd', 'sunsetStart' ],
    [ -6,   'dawn', 'dusk' ],                     //nautical twilight angle
    [ -12,  'nauticalDawn', 'nauticalDusk'],     //astronomical twilight angle
    [ -18,  'nightEnd', 'night' ],               //darkness angle
    [ 6,    'goldenHourEnd', 'goldenHour' ]
];

// adds a custom time to the times config

SolarAltitude.addTime = function (angle, riseName, setName) {
    times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function getJulianCycle(d, lw) {
    return Math.round(d - J0 - lw / (2 * PI));
}
function getApproxTransit(Ht, lw, n) {
    return J0 + (Ht + lw) / (2 * PI) + n;
}
function getSolarTransitJ(ds, M, L) {
    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);
}
function getHourAngle(h, phi, d) {
    var first = sin(h) - sin(phi) * sin(d),
        second = cos(phi) * cos(d),
        third = first / second;
    if ( third &lt; -1 || third &gt; 1 ) {
        third = Math.round(third);
    }  
  	return acos(third);
}


// calculates sun times for a given date and latitude/longitude

SolarAltitude.getTimes = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        n = getJulianCycle(d, lw),
        ds = getApproxTransit(0, lw, n),

        M = getSolarMeanAnomaly(ds),
        C = getEquationOfCenter(M),
        L = getEclipticLongitude(M, C),

        dec = getDeclination(L, 0),

        Jnoon = getSolarTransitJ(ds, M, L);


    // returns set time for the given sun altitude
    function getSetJ(h) {
        var w = getHourAngle(h, phi, dec),
            a = getApproxTransit(w, lw, n);

        return getSolarTransitJ(a, M, L);
    }


    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };

    var i, len, time, angle, morningName, eveningName, Jset, Jrise;

    for (i = 0, len = times.length; i &lt; len; i += 1) {
        time = times[i];

        Jset = getSetJ(time[0] * rad);
        Jrise = Jnoon - (Jset - Jnoon);

        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }

    return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function getMoonCoords(d) { // geocentric ecliptic coordinates of the moon

    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d), // mean distance

        l = L + rad * 6.289 * sin(M), // longitude
        b = rad * 5.128 * sin(F), // latitude
        dt = 385001 - 20905 * cos(M); // distance to the moon in km

    return {
        ra: getRightAscension(l, b),
        dec: getDeclination(l, b),
        dist: dt
    };
}

SolarAltitude.getMoonPosition = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        c = getMoonCoords(d),
        H = getSiderealTime(d, lw) - c.ra,
        h = getAltitude(H, phi, c.dec);

    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

    return {
        azimuth: getAzimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};

SolarAltitude.getMoonIllumination = function (date) {

    var d = toDays(date),
        s = getSunCoords(d),
        m = getMoonCoords(d),

        sdist = 149598000, // distance from Earth to Sun in km

        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi));

    return {
        fraction: (1 + cos(inc)) / 2,
        angle: atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec)
            - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra))
    };
};

SolarAltitude.printTime = function (d,m){
	var newd = new Date(d.valueOf() + m * 60000);
  	var min = newd.getMinutes();
    var hour = newd.getHours();
    if (min &lt; 10) min = "0" + min;
  	if (hour &lt; 10) hour = "0" + hour;
    return hour+":"+min;
};

SolarAltitude.saveTimer = function (timer,d,m){
	var str = 'hg.Program.Parameter("'+ timer + '").Value = SolarAltitude.printTime(d,m);';
	eval(str);
  	var str = 'var savedTimer = hg.Program.Parameter("'+ timer + '").Value';
  	eval(str);
    var spiltTimer = savedTimer.split(":");
    timer = timer.substring(timer.indexOf(".")+1);
  	hg.Scheduler.WithName(timer).SetSchedule(""+ spiltTimer[1] +" "+ spiltTimer[0] +" * * *");
};


SolarAltitude.main = function () {

  // HomeGenie Main Script Logic starts here ------- 

	var currentTime = new Date();
	var latitude = hg.Program.InputField("jkUtils.SolarAltitude.Latitude").Value;
	var longitude = hg.Program.InputField("jkUtils.SolarAltitude.Longitude").Value;    
	var sun = SolarAltitude.getTimes(currentTime, latitude, longitude);
	var moon = SolarAltitude.getMoonIllumination(currentTime);

	var timeFormat = {hour: "numeric", minute: "numeric"};

	// copy configure inputs to parameters as well
	hg.Program.Parameter("jkUtils.SolarAltitude.Latitude").Value = hg.Program.InputField("jkUtils.SolarAltitude.Latitude").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Longitude").Value = hg.Program.InputField("jkUtils.SolarAltitude.Longitude").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Label").Value = hg.Program.InputField("jkUtils.SolarAltitude.Label").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Timeformat").Value = hg.Program.InputField("jkUtils.SolarAltitude.Timeformat").Value;

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Start",sun.nightEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Noon",sun.solarNoon,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Start",sun.night,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Nadir",sun.nadir,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Night.End",sun.nightEnd,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.Start",sun.nightEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.End",sun.nauticalDawn,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.Start",sun.nauticalDawn,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.End",sun.dawn,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.Start",sun.dawn,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.End",sun.sunrise,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.Start",sun.sunrise,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.End",sun.sunriseEnd,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.Start",sun.sunriseEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.End",sun.goldenHourEnd,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.Start",sun.goldenHour,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.End",sun.sunsetStart,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.Start",sun.sunsetStart,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.End",sun.sunset,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.Start",sun.sunset,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.End",sun.dusk,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.Start",sun.dusk,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.End",sun.nauticalDusk,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.Start",sun.nauticalDusk,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.End",sun.night,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Night.Start",sun.night,0);

	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Fraction").Value = moon.fraction;

	moon.fraction = moon.fraction * 100;

	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Precent").Value = Math.round(moon.fraction) + "%";
	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Angle").Value = moon.angle;
	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Waxing").Value = (moon.angle &lt; 0 ? "1" : "0");

	hg.Program.Parameter("jkUtils.SolarAltitude.LastUpdated").Value = SolarAltitude.printTime(currentTime,0);

	hg.Program.Notify("jkUtils - Solar Altitude", "Data has been updated.");
  
};

while (hg.Program.IsEnabled)
{
  	SolarAltitude.main();
  	// Update every 12 hours
  	hg.Pause(12*60*60);

}


//
// Web service calls handling
//
/* WebServiceCall currently not working 

hg.WebServiceCallReceived("HomeAutomation.HomeGenie.Automation", function (args) {
{
    //string[] reqs = ((string)args).Split('/');
  	var reqs = args.split('/');
    var res = "";
    hg.Program.Notify("SolarAltitude", "WebServiceCall.");
    
    try
    {
      var command = reqs[2];
      var pid = reqs[1];
      if (pid == hg.Program.Module.Address)
      {

        switch(command)
        {
          case "Control.Refresh":
            //Program.Notify("jkutils: SolarAltitude","Update triggered.");
          	SolarAltitude.main();
            break;
        }

      }

    } catch (e) {
    
      var res = "{ 'ResponseValue' : 'ERROR: " + e.Message + " " + e.StackTrace + "' }";
      
    }
    // unable to process request
    return res;

});
*/


// For your convenience:
//   If you should need a way to parse the saved times within you own scripts, you can use the following function.
//   It is able to parse all kind of notations e.g.: '1:00 pm','1:00 p.m.', ...
   
//   function parseTime(timestring) {
//     var d = new Date();
//     var time = timestring.match(/(\d+)(?::(\d\d))?\s*(p?)/);
//     d.setHours( parseInt(time[1]) + (time[3] ? 12 : 0) );
//     d.setMinutes( parseInt(time[2]) || 0 );
     
//    return d;
//   }
   
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <IsRunning>true</IsRunning>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>501</Address>
  <Name>jkUtils - Solar Altitude</Name>
  <Description>Calculates schedulers for sunrise/sunset with civil, nautical, astronomical timings. 
  Please set your local longitude/latitude in program options.</Description>
  <Group>Weather and Enviroment</Group>
  <ActivationTime>2015-01-24T15:29:22.324048Z</ActivationTime>
  <TriggerTime>2017-04-24T10:48:18.79013Z</TriggerTime>
  <Type>Javascript</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>